import { SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import { Listing } from "@prisma/client";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { api } from "~/utils/api";
import { useForm, SubmitHandler } from "react-hook-form";

export default function ListingView() {
  const sendMessage = api.listings.sendMessage.useMutation();
  const router = useRouter();
  const user = useUser();
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<{ message: string }>();

  const listing = api.listings.get.useQuery(
    {
      listingId: router.query.id as string,
    },
    {
      enabled: !!router.query.id,
    }
  );
  const listingItem = listing.data;

  if (!listingItem) {
    return;
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="mx-6 flex min-h-screen flex-col items-center justify-center pt-16 md:pt-0 lg:mx-12">
        <div className="flex flex-col gap-4">
          <h1 className="my-6 text-2xl">{listingItem.name}</h1>
          <p>{listingItem.description}</p>
          <p className="self-end text-lg">Â£{listingItem.price}</p>
        </div>
        {user.isSignedIn && (
          <form
            className="flex flex-col gap-4"
            onSubmit={handleSubmit((formData) => {
              sendMessage
                .mutateAsync({
                  message: formData.message,
                  listingId: listingItem.id,
                })
                .then(() => reset());
            })}
          >
            <div>
              <label
                htmlFor="name"
                className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
              >
                Message
              </label>
              <textarea
                id="message"
                {...register("message", { required: true })}
                className="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
              />
              {errors.message && <span>This field is required</span>}
            </div>
            <button className="mt-6 inline-flex items-center rounded-lg bg-blue-700 px-3 py-2 text-center text-sm font-medium text-white hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
              Send Message
            </button>
          </form>
        )}
      </main>
    </>
  );
}
